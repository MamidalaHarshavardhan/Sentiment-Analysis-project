# -*- coding: utf-8 -*-
"""sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B6yT0tJSULIpVdWkyqTpYnzoPSF-Mlaj
"""

import numpy as np
import pandas as pd

data=pd.read_csv('/content/Restaurant_Reviews.tsv',delimiter='\t',quoting=3)

data.shape

data.columns

data.head()

data.info

import nltk
import re
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

corpus=[]
for i in range(0,1000):
  review=re.sub(pattern='[^a-zA-Z]',repl=' ', string=data['Review'][i])

  review=review.lower()

  review_words=review.split()
  review_words=[word for word in review_words if not word in set(stopwords.words('english'))]

  ps=PorterStemmer()
  review=[ps.stem(word) for word in review_words]

  review=' '.join(review)
  corpus.append(review)

corpus[:1500]

from sklearn.feature_extraction.text import CountVectorizer

cv =CountVectorizer(max_features=1500)

x=cv.fit_transform(corpus).toarray()

y=data.iloc[:,1].values

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test=train_test_split(x,y,test_size=0.20, random_state=0)

X_train.shape,X_test.shape,Y_train.shape,Y_test.shape

from sklearn.naive_bayes import  MultinomialNB

classifier=MultinomialNB()
classifier.fit(X_train, Y_train)

Y_pred=classifier.predict(X_test)
Y_pred

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

score1=accuracy_score(Y_test,Y_pred)
score2=accuracy_score(Y_test,Y_pred)
score3=recall_score(Y_test,Y_pred)

print("----------SCORES---------")
print("Accuracy score is {}%".format(round(score1*100,3)))
print("precision score is {}%".format(round(score2*100,3)))
print("recall score is {}%".format(round(score3*100,3)))

from sklearn.metrics import confusion_matrix
cm =confusion_matrix(Y_test,Y_pred)
cm

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

plt.figure(figsize=(10,6))
sns.heatmap(cm,annot=True,cmap="YlGnBu", xticklabels=['negative','positive'],yticklabels=['negative','positive'])

plt.xlabel('predicted Values')
plt.ylabel('Actual Values')

from ssl import ALERT_DESCRIPTION_HANDSHAKE_FAILURE
best_accuracy =0.0
alpha_val =0.0
for i in np.arange(0.1,1.1,0.1):
  temp_classifier =MultinomialNB(alpha=i)
  temp_classifier.fit(X_train,Y_train)
  temp_y_pred =temp_classifier.predict(X_test)
  score = accuracy_score(Y_test,Y_pred)
  print("Accuracy Score for alpha={} is {}%".format(round(i,1),round(score*100,3)))
  if score>best_accuracy:
     best_accuracy=score
     alpha_val =i
print('----------------------------------------------------')
print("The Best Accuracy Score is {}% with alpha value as {}".format(round(best_accuracy*100, 2), round(alpha_val, 1)))

classifier =MultinomialNB(alpha=0.2)
classifier.fit(X_train, Y_train)

import re
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

def predict_sentiment(sample_review):
    sample_review = re.sub(pattern='[^a-zA-Z]', repl=' ', string=sample_review)
    sample_review = sample_review.lower()
    sample_review_words = sample_review.split()
    sample_review_words = [word for word in sample_review_words if not word in set(stopwords.words('english'))]
    ps = PorterStemmer()
    final_review = [ps.stem(word) for word in sample_review_words]
    final_review = ' '.join(final_review)

    temp = cv.transform([final_review]).toarray()
    return classifier.predict(temp)

sample_review ='The food is really bad.'

if predict_sentiment(sample_review):
  print("Positive review")

else:
  print("Negative review")

sample_review ='The food  was absolutely wonderful,from preparation to presentation, very pleasing.'

if predict_sentiment(sample_review):
  print("This is a Positive review")

else:
  print("This is a Negative review")

sample_review ='food averag'

if predict_sentiment(sample_review):
  print("This is a Positive review")

else:
  print("This is a Negative review")